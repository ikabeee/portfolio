---
import Button from "./Button.astro";
import Send from "./icons/general/Send.astro";
---

<form
  {...Astro.props}
  class="flex flex-col gap-4 bg-base-200 p-4 md:p-6 lg:p-8 rounded-lg shadow-md"
  method="POST"
  id="form"
>
  <input
    type="hidden"
    name="access_key"
    value="9c4e9618-cb58-4902-910b-bf208f932ddb"
  />
  <fieldset class="fieldset">
    <legend class="fieldset-legend text-base md:text-lg">Nombre/empresa</legend>
    <input
      type="text"
      name="name"
      placeholder="Juan Perez"
      class="input input-bordered w-full text-sm md:text-base"
    />
  </fieldset>
  <fieldset class="fieldset">
    <legend class="fieldset-legend text-base md:text-lg"
      >Correo electrónico</legend
    >
    <input
      type="email"
      name="email"
      placeholder="example@gmail.com"
      class="input input-bordered w-full text-sm md:text-base"
      required
    />
  </fieldset>
  <fieldset class="fieldset">
    <legend class="fieldset-legend text-base md:text-lg"
      >¿Cuál es tu idea?</legend
    >
    <textarea
      name="message"
      placeholder="Explícame tu proyecto..."
      class="textarea textarea-bordered w-full h-24 md:h-32 text-sm md:text-base resize-none"
      required></textarea>
  </fieldset>
  <div id="result" class="hidden text-sm p-3 rounded-lg"></div>
  <div class="flex justify-center md:justify-start">
    <Button type="submit" label="Enviar" size="sm" icon={Send} />
  </div>
</form>
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("form");
    const result = document.getElementById("result");
    const submitButton = form.querySelector('button[type="submit"]');
    const buttonSpan = submitButton.querySelector("span") || submitButton;

    const originalText = buttonSpan.textContent;
    const originalClasses = submitButton.className;

    function checkRateLimit() {
      const lastSubmit = localStorage.getItem("lastFormSubmit");
      if (lastSubmit) {
        const timeElapsed = Date.now() - parseInt(lastSubmit);
        const oneMinute = 60 * 1000; // 1 minuto en milisegundos

        if (timeElapsed < oneMinute) {
          const remainingTime = Math.ceil((oneMinute - timeElapsed) / 1000);
          showError(
            `Debes esperar ${remainingTime} segundos antes de enviar otro mensaje.`
          );
          return false;
        }
      }
      return true;
    }

    function showError(message) {
      result.className =
        "block text-sm p-3 rounded-lg bg-red-100 text-red-700 border border-red-300";
      result.textContent = message;
      result.hidden = false;
    }

    function showSuccess(message) {
      result.className =
        "block text-sm p-3 rounded-lg bg-green-100 text-green-700 border border-green-300";
      result.textContent = message;
      result.hidden = false;
    }

    function hideResult() {
      result.hidden = true;
      result.textContent = "";
    }

    function setButtonLoading() {
      submitButton.disabled = true;
      submitButton.className = originalClasses.replace(
        /bg-\[#61AFEF\]/,
        "bg-blue-500"
      );
      buttonSpan.textContent = "Enviando...";
    }

    function resetButton() {
      submitButton.disabled = false;
      submitButton.className = originalClasses;
      buttonSpan.textContent = originalText;
    }

    form.addEventListener("submit", function (e) {
      e.preventDefault();
      hideResult();

      // Verificar rate limit
      if (!checkRateLimit()) {
        return;
      }

      if (!form.checkValidity()) {
        showError("Por favor completa todos los campos correctamente.");
        return;
      }

      const formData = new FormData(form);
      setButtonLoading();

      fetch("https://api.web3forms.com/submit", {
        method: "POST",
        body: formData,
      })
        .then(async (response) => {
          const json = await response.json();

          if (response.ok && json.success) {
            // Guardar timestamp del envío exitoso
            localStorage.setItem("lastFormSubmit", Date.now().toString());
            showSuccess("¡Mensaje enviado exitosamente! Te contactaré pronto.");
            form.reset();
          } else {
            // Manejar errores específicos
            if (response.status === 429) {
              showError("Límite de envíos excedido. Intenta más tarde.");
            } else {
              showError(
                json.message ||
                  "Error al enviar el mensaje. Intenta nuevamente."
              );
            }
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          showError(
            "Hubo un problema de conexión. Verifica tu internet e intenta nuevamente."
          );
        })
        .finally(() => {
          resetButton();
          setTimeout(() => {
            hideResult();
          }, 5000);
        });
    });
  });
</script>
